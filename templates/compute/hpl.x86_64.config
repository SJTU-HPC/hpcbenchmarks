[SERVER]
localhost

[DOWNLOAD]
hpl/2.3 https://netlib.org/benchmark/hpl/hpl-2.3.tar.gz

[DEPENDENCY]
export CC=`which gcc`
export CXX=`which g++`
export FC=`which fortran`
./hpcbench -install openblas/0.3.18 gcc
mkdir -p $HPCbench_ROOT/benchmark/compute
tar -xzvf $HPCbench_DOWNLOAD/hpl-2.3.tar.gz -C $HPCbench_ROOT/benchmark/compute

[ENV]
module use ./software/moduledeps/gcc11.2.0/
module load openblas/0.3.18
export HPL_HOME=$HPCbench_ROOT/benchmark/compute/hpl-2.3

[APP]
app_name = hpl
build_dir = $HPL_HOME
binary_dir = $HPL_HOME/bin/linux64
case_dir = $HPL_HOME/bin/linux64

[BUILD]
cat << \EOF >  Make.linux64
SHELL        = /bin/sh
CD           = cd
CP           = cp
LN_S         = ln -s
MKDIR        = mkdir
RM           = /bin/rm -f
TOUCH        = touch
ARCH         = linux64
TOPdir       = $(HPL_HOME)
INCdir       = $(TOPdir)/include
BINdir       = $(TOPdir)/bin/$(ARCH)
LIBdir       = $(TOPdir)/lib/$(ARCH)
HPLlib       = $(LIBdir)/libhpl.a 
LAdir        = $(OPENBLAS_PATH)
LAinc        =
LAlib        = $(LAdir)/lib/libopenblas.a
F2CDEFS      = -DAdd__ -DF77_INTEGER=int -DStringSunStyle
HPL_INCLUDES = -I$(INCdir) -I$(INCdir)/$(ARCH) $(LAinc) $(MPinc)
HPL_LIBS     = $(HPLlib) $(LAlib) $(MPlib)
HPL_OPTS     = -DHPL_DETAILED_TIMING -DHPL_PROGRESS_REPORT
HPL_DEFS     = $(F2CDEFS) $(HPL_OPTS) $(HPL_INCLUDES)
CC           = mpicc
CCNOOPT      = $(HPL_DEFS)
CCFLAGS      = $(HPL_DEFS) -fomit-frame-pointer -O3 -fopenmp -funroll-loops -W -Wall
LINKER       = $(CC)
LINKFLAGS    = $(CCFLAGS)
ARCHIVER     = ar
ARFLAGS      = r
RANLIB       = echo
EOF
make arch=linux64 -j
if [ ! -e ./bin/linux64/xhpl ]; then
   echo "Build failed"
   exit 1
fi
echo "check if SVE exists"
objdump -d bin/linux64/xhpl | grep z0

cd $HPL_HOME/bin/linux64

# modify HPL.dat
cat << \EOF >  HPL.dat
HPLinpack benchmark input file
Innovative Computing Laboratory, University of Tennessee
HPL.out      output file name (if any)
6            device out (6=stdout,7=stderr,file)
1            # of problems sizes (N)
176640 Ns
1            # of NBs
256 NBs
0            PMAP process mapping (0=Row-,1=Column-major)
1            # of process grids (P x Q)
8 Ps
8 Qs
16.0         threshold
1            # of panel fact
2 1 0        PFACTs (0=left, 1=Crout, 2=Right)
1            # of recursive stopping criterium
1          NBMINs (>= 1)
1            # of panels in recursion
2            NDIVs
1            # of recursive panel fact.
0 1 2        RFACTs (0=left, 1=Crout, 2=Right)
1            # of broadcast
0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)
1            # of lookahead depth
0            DEPTHs (>=0)
0            SWAP (0=bin-exch,1=long,2=mix)
1           swapping threshold
1            L1 in (0=transposed,1=no-transposed) form
1            U  in (0=transposed,1=no-transposed) form
0            Equilibration (0=no,1=yes)
8            memory alignment in double (> 0)
EOF

[CLEAN]
make arch=linux64 clean
rm -rf bin/linux64

[RUN]
run = mpirun -np 64
binary = xhpl | tee $HPCbench_RESULT/compute/hpl.txt
nodes = 1

[JOB1]
#!/bin/bash
#SBATCH -J hpl
#SBATCH -N 2
#SBATCH --ntasks-per-node 64
#SBATCH -p {{ CPU_PARTITION }}
#SBATCH --exclusive 

cd $HPCbench_ROOT/benchmark/compute/hpl-2.3/bin/linux64

# modify HPL.dat
cat << \EOF >  HPL.dat
HPLinpack benchmark input file
Innovative Computing Laboratory, University of Tennessee
HPL.out      output file name (if any)
6            device out (6=stdout,7=stderr,file)
1            # of problems sizes (N)
176640 Ns
1            # of NBs
256 NBs
0            PMAP process mapping (0=Row-,1=Column-major)
1            # of process grids (P x Q)
8 Ps
16 Qs
16.0         threshold
3            # of panel fact
0 1 2        PFACTs (0=left, 1=Crout, 2=Right)
2            # of recursive stopping criterium
2 4          NBMINs (>= 1)
1            # of panels in recursion
2            NDIVs
3            # of recursive panel fact.
0 1 2        RFACTs (0=left, 1=Crout, 2=Right)
1            # of broadcast
0            BCASTs (0=1rg,1=1rM,2=2rg,3=2rM,4=Lng,5=LnM)
1            # of lookahead depth
0            DEPTHs (>=0)
2            SWAP (0=bin-exch,1=long,2=mix)
64           swapping threshold
0            L1 in (0=transposed,1=no-transposed) form
0            U  in (0=transposed,1=no-transposed) form
1            Equilibration (0=no,1=yes)
8            memory alignment in double (> 0)
EOF

export UCX_NET_DEVICES=mlx5_0:1
mpirun xhpl | tee $HPCbench_RESULT/compute/hpl.txt
